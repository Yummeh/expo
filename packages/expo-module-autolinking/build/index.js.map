{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport Table from 'cli-table3';\nimport glob from 'fast-glob';\nimport findUp from 'find-up';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\n\nimport {\n  AutolinkingPlatform,\n  AutolinkingSearchConfig,\n  AutolinkingSearchResults,\n  ModuleRevision,\n} from './types';\n\n/**\n * Resolves autolinking search paths. If none is provided, it accumulates all node_modules when\n * going up through the path components. This makes workspaces work out-of-the-box without any configs.\n */\nexport async function resolveSearchPathsAsync(\n  searchPaths: string[] | null,\n  cwd: string\n): Promise<string[]> {\n  return searchPaths && searchPaths.length > 0\n    ? searchPaths.map(searchPath => path.resolve(cwd, searchPath))\n    : await findDefaultPathsAsync(cwd);\n}\n\nexport async function findPackageJsonPathAsync(): Promise<string | null> {\n  return (await findUp('package.json', { cwd: process.cwd() })) ?? null;\n}\n/**\n * Looks up for workspace's `node_modules` paths.\n */\nexport async function findDefaultPathsAsync(cwd: string): Promise<string[]> {\n  const paths = [];\n  let dir = cwd;\n  let pkgJsonPath: string | undefined;\n\n  while ((pkgJsonPath = await findUp('package.json', { cwd: dir }))) {\n    dir = path.dirname(path.dirname(pkgJsonPath));\n    paths.push(path.join(pkgJsonPath, '..', 'node_modules'));\n  }\n  return paths;\n}\n\n/**\n * Searches for modules to link based on given config.\n */\nexport async function findModulesAsync(\n  platform: AutolinkingPlatform,\n  providedConfig: AutolinkingSearchConfig\n): Promise<AutolinkingSearchResults> {\n  const config = await mergeLinkingOptionsAsync(platform, providedConfig);\n  const modulesRevisions: Record<string, ModuleRevision[]> = {};\n  const results: AutolinkingSearchResults = {};\n\n  for (const searchPath of config.searchPaths) {\n    const paths = await glob('**/unimodule.json', {\n      cwd: searchPath,\n    });\n\n    for (const moduleConfigPath of paths) {\n      const modulePath = fs.realpathSync(path.join(searchPath, path.dirname(moduleConfigPath)));\n      // const modulePath = path.join(searchPath, path.dirname(moduleConfigPath));\n      const moduleConfig = require(path.join(modulePath, 'unimodule.json'));\n      const { name, version } = require(path.join(modulePath, 'package.json'));\n\n      if (config.exclude?.includes(name) || !moduleConfig.platforms?.includes(platform)) {\n        continue;\n      }\n\n      const moduleRevision: ModuleRevision = {\n        path: modulePath,\n        version,\n      };\n      if (!modulesRevisions[name]) {\n        modulesRevisions[name] = [moduleRevision];\n      } else if (modulesRevisions[name].every(revision => revision.path !== modulePath)) {\n        modulesRevisions[name].push(moduleRevision);\n      }\n    }\n  }\n\n  // Resolve revisions to the main one (first found) and duplicates.\n  Object.entries(modulesRevisions).reduce((acc, [moduleName, revisions]) => {\n    const mainRevision = revisions.shift();\n\n    if (mainRevision) {\n      acc[moduleName] = {\n        ...mainRevision,\n        duplicates: revisions,\n      };\n    }\n    return acc;\n  }, results);\n\n  return results;\n}\n\n/**\n * Merges autolinking options from different sources (the later the higher priority)\n * - options defined in package.json's `expoModules` field\n * - platform-specific options from the above (e.g. `expoModules.ios`)\n * - options provided to the CLI command\n */\nexport async function mergeLinkingOptionsAsync(\n  platform: AutolinkingPlatform,\n  providedConfig: AutolinkingSearchConfig\n): Promise<AutolinkingSearchConfig> {\n  const packageJsonPath = await findPackageJsonPathAsync();\n  const packageJson = packageJsonPath ? require(packageJsonPath) : {};\n  const baseConfig = packageJson['expoModules'] ?? packageJson['react-native-unimodules'];\n  const platformConfig = baseConfig?.[platform];\n\n  const configs: Partial<AutolinkingSearchConfig>[] = [providedConfig, platformConfig, baseConfig];\n\n  function pickMergedValue<T extends keyof AutolinkingSearchConfig>(\n    key: T\n  ): AutolinkingSearchConfig[T] | null {\n    for (const obj of configs) {\n      if (obj?.[key]) {\n        return obj[key] as AutolinkingSearchConfig[T] | null;\n      }\n    }\n    return null;\n  }\n\n  return {\n    searchPaths: await resolveSearchPathsAsync(pickMergedValue('searchPaths'), process.cwd()),\n    ignorePaths: pickMergedValue('ignorePaths'),\n    exclude: pickMergedValue('exclude'),\n  };\n}\n\n/**\n * Verifies the search results and then returns logs string, but doesn't print it yet.\n * Right now it only checks whether there are no duplicates.\n */\nexport function verifySearchResults(searchResults: AutolinkingSearchResults): string {\n  const cwd = process.cwd();\n  const relativePath: (module: ModuleRevision) => string = m => path.relative(cwd, m.path);\n  const tables: Table.Table[] = [];\n\n  for (const moduleName in searchResults) {\n    const moduleResult = searchResults[moduleName];\n\n    if (moduleResult.duplicates.length > 0) {\n      const table = new Table();\n      const duplicates = moduleResult.duplicates;\n      const paths = [\n        chalk.magenta(relativePath(moduleResult)),\n        ...duplicates.map(duplicate => chalk.gray(relativePath(duplicate))),\n      ];\n      const versions = [\n        chalk.cyan(moduleResult.version),\n        ...duplicates.map(duplicate => chalk.gray(duplicate.version)),\n      ];\n\n      table.push(\n        [{ colSpan: 2, content: `📦 ${chalk.green(moduleName)} found at multiple directories` }],\n        [paths.join(os.EOL), versions.join(os.EOL)]\n      );\n      tables.push(table);\n    }\n  }\n  if (tables.length > 0) {\n    return [\n      ...tables.map(table => table.toString()),\n      chalk.yellow(\n        `⚠️  Found ${tables.length} duplicated modules, but only the greatest versions will be autolinked.`\n      ),\n      chalk.yellow(\n        '⚠️  Make sure to get rid of unnecessary versions as it may introduce side effects, especially on the JavaScript side.'\n      ),\n    ].join(os.EOL);\n  }\n  return '';\n}\n\n/**\n * Resolves search results to a list of platform-specific configuration.\n */\nexport async function resolveModulesAsync(\n  platform: string,\n  searchResults: AutolinkingSearchResults\n): Promise<any[]> {\n  const platformLinking = require(`./resolvers/${platform}`);\n\n  return (\n    await Promise.all(\n      Object.entries(searchResults).map(([moduleName, revision]) =>\n        platformLinking.resolveModuleAsync(moduleName, revision)\n      )\n    )\n  ).filter(Boolean);\n}\n"]}